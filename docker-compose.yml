version: '3.8'

services:
  orchestrator:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: agent-orchestra
    ports:
      - "3000:3000"
      - "9090:9090"  # Metrics
    environment:
      - NODE_ENV=production
      - API_PORT=3000
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://orchestra:orchestra@postgres:5432/orchestra
      - JAEGER_ENDPOINT=http://jaeger:14268/api/traces
    volumes:
      - ./config:/app/config
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
      - jaeger
    networks:
      - orchestra-network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: orchestra-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - orchestra-network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: orchestra-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=orchestra
      - POSTGRES_USER=orchestra
      - POSTGRES_PASSWORD=orchestra
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - orchestra-network
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: orchestra-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # UI
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - orchestra-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: orchestra-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - orchestra-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: orchestra-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - orchestra-network
    restart: unless-stopped

volumes:
  redis-data:
  postgres-data:
  prometheus-data:
  grafana-data:

networks:
  orchestra-network:
    driver: bridge